{
	"info": {
		"_postman_id": "e094e316-0141-4e38-b37b-bcba1ca28289",
		"name": "TP_NOTE_NODEJS",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32390876"
	},
	"item": [
		{
			"name": "READ Actus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/actus/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"actus",
						""
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "READ Actu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/actus/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"actus",
						"{{id}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "READ Suggestions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/actus/suggestions/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"actus",
						"suggestions",
						"{{id}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "READ Comments",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/comments/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"comments",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "READ Comment",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "READ Comment by Actu",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/comments/actu/65ce094e0127537be9dc8d28",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"comments",
						"actu",
						"65ce094e0127537be9dc8d28"
					]
				}
			},
			"response": []
		},
		{
			"name": "READ User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZvb0BkZXYuY29tIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzA3OTkwMDM2LCJleHAiOjE3MDc5OTA5MzZ9.50en4qkWEdxKgpc0CXCtxSWZJI27_PxDpTkprEBQt2M",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/users/foo@dev.com",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"foo@dev.com"
					]
				}
			},
			"response": []
		},
		{
			"name": "READ Users",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZvb0BkZXYuY29tIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzA3OTk1Njg3LCJleHAiOjE3MDc5OTY1ODd9.APn8QRPHhaPGmycS7OoKtoC9SxBi8Jw9VDZou3eyacM",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE Actu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"title\": \"League of Legends\",\n    \"content\": \"# League of Legends: Le Jeu de l'Action Strat√©gique\\n\\nLeague of Legends (LoL) est un jeu vid√©o en ligne multijoueur de type ar√®ne de bataille en ligne (MOBA) d√©velopp√© et √©dit√© par Riot Games. Lanc√© en octobre 2009, League of Legends est rapidement devenu l'un des jeux les plus populaires au monde, attirant des millions de joueurs √† travers le globe.\\n\\n## Univers et Gameplay\\n\\nDans League of Legends, deux √©quipes de cinq joueurs s'affrontent pour d√©truire la base adverse, appel√©e le Nexus. Chaque joueur contr√¥le un champion aux capacit√©s uniques, et le gameplay se concentre sur la coop√©ration d'√©quipe, la strat√©gie, et la comp√©tition tactique.\\n\\n## Modes de Jeu\\n\\nLeague of Legends propose une vari√©t√© de modes de jeu, y compris le mode Class√©, o√π les joueurs peuvent progresser dans un syst√®me de classement comp√©titif, ainsi que des modes occasionnels et sp√©ciaux pour des exp√©riences de jeu diverses.\\n\\n## √âv√©nements et Comp√©titions\\n\\nEn plus du gameplay standard, League of Legends est √©galement connu pour ses √©v√©nements en jeu et ses comp√©titions esportives de renomm√©e mondiale. Les Worlds, le championnat annuel de League of Legends, attire des millions de spectateurs et offre des r√©compenses consid√©rables aux √©quipes victorieuses.\\n\\n## Communaut√© et Culture\\n\\nLa communaut√© de League of Legends est vaste et diversifi√©e, comprenant des joueurs de tous √¢ges et de tous horizons. Des forums en ligne aux r√©seaux sociaux, les joueurs partagent des strat√©gies, discutent des mises √† jour du jeu, et c√©l√®brent leurs moments de victoire ensemble.\\n\\n## Conclusion\\n\\nLeague of Legends continue d'√™tre un pilier de l'industrie du jeu vid√©o, combinant action, strat√©gie et comp√©tition dans un environnement en constante √©volution. Avec une communaut√© passionn√©e et des d√©veloppeurs d√©di√©s √† son am√©lioration continue, League of Legends reste l'un des jeux les plus influents et les plus appr√©ci√©s de l'histoire du jeu vid√©o.\\n\\n*Plongez dans l'univers de League of Legends et d√©couvrez le frisson de la bataille, l'excitation de la comp√©tition, et la camaraderie de la communaut√© !*\",\n    \"filters\": [\"league_of_legends\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/actus/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"actus",
						"create"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "CREATE User",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"foo@dev.com\",\r\n    \"password\" : \"foototo\",\r\n    \"role\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/users/create",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "LOGIN User",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"foo@dev.com\",\r\n    \"password\" : \"foototo1582\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE Actu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{id}}\",\n\t\"title\": \"le test ultime\",\n    \"filters\": [\n        \"hehehaha\",\n        \"hahahehe\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/actus/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"actus",
						""
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "UPDATE Password",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"foo@dev.com\",\r\n    \"oldPassword\": \"foototo\",\r\n    \"newPassword\": \"foototo1582\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/users/forgotPassword",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"forgotPassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "ADD Comment",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\": \"{{user_id}}\",\r\n    \"actu_id\": \"{{actu_id}}\",\r\n    \"comment\": \"Wanna be yours\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Actu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/actus/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"actus",
						"{{id}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "DELETE Comment",
			"request": {
				"method": "DELETE",
				"header": []
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZvb0BkZXYuY29tIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzA4NjA2NjIwLCJleHAiOjE3MDg2MDc1MjB9.NmqiMhAJ5cnf81KbDgOhryHdzF_YRmCyMO_uaKkCnsA",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "65cddeb11cfd847dfb49bdd2"
		},
		{
			"key": "base_url",
			"value": "localhost:3001"
		},
		{
			"key": "user_id",
			"value": "65cdd4ebb7e32831de0ae9a2",
			"type": "string"
		},
		{
			"key": "actu_id",
			"value": "65d242ed944421b8e16a5114",
			"type": "string"
		}
	]
}